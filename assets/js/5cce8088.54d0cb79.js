"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[9714],{43060:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=r(85893),t=r(11151);const o={},s="CryptoServer CP5 PKCS#11 Installation",c={id:"signing/qscd-integration/utimaco-cp5/middleware",title:"CryptoServer CP5 PKCS#11 Installation",description:"11 Installation",source:"@site/docs/30-signing/25-qscd-integration/07-utimaco-cp5/09-middleware.md",sourceDirName:"30-signing/25-qscd-integration/07-utimaco-cp5",slug:"/signing/qscd-integration/utimaco-cp5/middleware",permalink:"/docs/signing/qscd-integration/utimaco-cp5/middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/25-qscd-integration/07-utimaco-cp5/09-middleware.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Issue and Import Certificate",permalink:"/docs/signing/qscd-integration/utimaco-cp5/issuecert"},next:{title:"Crypto Token Configuration",permalink:"/docs/signing/qscd-integration/utimaco-cp5/cryptotoken"}},a={},l=[{value:"Install CryptoServer CP5 PKCS#11 libraries",id:"install-cryptoserver-cp5-pkcs11-libraries",level:2},{value:"Configuration of CryptoServer CP5 PKCS#11 middleware",id:"configuration-of-cryptoserver-cp5-pkcs11-middleware",level:2},{value:"<code>CS_PKCS11_R2_CFG</code>",id:"cs_pkcs11_r2_cfg",level:2},{value:"Configure CryptoServer CP5 PKCS#11 for SignServer",id:"configure-cryptoserver-cp5-pkcs11-for-signserver",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"cryptoserver-cp5-pkcs11-installation",children:"CryptoServer CP5 PKCS#11 Installation"}),"\n",(0,i.jsx)(n.p,{children:"CryptoServer CP5 comes with the PKCS#11 middleware that is used in order to integrate with the PKCS#11 Crypto Token of the SignServer. You can use the following instructions in order to install the CryptoServer CP5 PKCS#11 middleware to be used with the SignServer."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The following document assumes installation on the Linux system, however, the steps can be reproduced on other OS with different libraries."})}),"\n",(0,i.jsx)(n.h2,{id:"install-cryptoserver-cp5-pkcs11-libraries",children:"Install CryptoServer CP5 PKCS#11 libraries"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For Linux, and other UNIX systems: shared library ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2.so"})," and static library ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2_m.a"}),". Both are built with the GNU Compiler Collections. The libraries contain everything that is needed to communicate between the SignServer and CryptoServer CP5."]})}),"\n",(0,i.jsxs)(n.p,{children:["Copy ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2.so"})," and ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2_m.a"})," files into directory where applications and user can find and use them, for example into ",(0,i.jsx)(n.code,{children:"/usr/lib"})," folder."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp libcs_pkcs11_R2.so /usr/lib\ncp libcs_pkcs11_R2_m.a /usr/lib\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It is important, that the user that runs the SignServer (and the application server) has proper permission to use both ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2.so"})," and ",(0,i.jsx)(n.code,{children:"libcs_pkcs11_R2_m.a"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-of-cryptoserver-cp5-pkcs11-middleware",children:"Configuration of CryptoServer CP5 PKCS#11 middleware"}),"\n",(0,i.jsxs)(n.p,{children:["Create a copy of the sample configuration file ",(0,i.jsx)(n.code,{children:"cs_pkcs11_R2.cfg"})," and save it into location where the user running the SignServer has proper permissions to read its content."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp cs_pkcs11_R2.cfg /etc/utimaco/cs_pkcs11_R2.cfg\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Configure the properties of the ",(0,i.jsx)(n.code,{children:"cs_pkcs11_R2.cfg"})," according to your environment setup. For the list of all available properties and description, refer to ",(0,i.jsx)(n.strong,{children:"PKCS#11 R2 Developer Guide"})]}),"\n",(0,i.jsx)(n.p,{children:"For the documentation purposes, let's assume the following CryptoServer CP5 PKCS#11 configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Global]\n# Path to the logfile (name of logfile is attached by the API)\n# For unix:\nLogpath = /tmp\n# For windows:\n#Logpath = C:/ProgramData/Utimaco/PKCS11_R2\n\n# Loglevel (0 = NONE; 1 = ERROR; 2 = WARNING; 3 = INFO; 4 = TRACE)\nLogging = 4\n# Maximum size of the logfile in bytes (file is rotated with a backupfile if full)\nLogsize = 10mb\n\n# If true, key handles of created/generated keys are random\nRandomizeKeyHandles = false\n\n# If true, every session establishs its own connection\nSlotMultiSession = true\n\n# Maximum number of slots that can be used\nSlotCount = 10\n\n# If true, leading zeroes of decryption operations will be kept\nKeepLeadZeros = false\n\n# Configures load balancing mode ( == 0 ) or failover mode ( > 0 )\nFallbackInterval = 0\n\n# Prevents expiring session after inactivity of 15 minutes\nKeepAlive = false\n\n# Timeout of the open connection command in ms\nConnectionTimeout = 5000\n\n# Timeout of command execution in ms\nCommandTimeout = 60000\n\n# List of official PKCS#11 mechanisms which should be customized\n#CustomMechanisms = { CKM_AES_CBC CKM_AES_ECB }\n\n#[CryptoServer]\n# Device specifier (here: CryptoServer is internal PCI device)\n# For unix:\n#Device = /dev/cs2\n# For windows:\n#Device = PCI:0\n\n[CryptoServer]\n# Device specifier (here: CryptoServer is CSLAN with IP address 192.168.0.1)\n#Device = 192.168.0.1\nDevice = 3001@localhost\n\n#[CryptoServer]\n# Device specifier (here: CryptoServer is logical failover device of CSLANs with IP address 192.168.0.2 and IP address 192.168.0.3)\n#Device = { 192.168.0.2 192.168.0.3 }\n\n#[Slot]\n# Slotsection for slot with number 0\n#SlotNumber = 0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cs_pkcs11_r2_cfg",children:(0,i.jsx)(n.code,{children:"CS_PKCS11_R2_CFG"})}),"\n",(0,i.jsxs)(n.p,{children:["Export the environment variable ",(0,i.jsx)(n.code,{children:"CS_PKCS11_R2_CFG"})," with the value of the path to the ",(0,i.jsx)(n.code,{children:"cs_pkcs11_R2.cfg"})," configuration file."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CS_PKCS11_R2_CFG"})," environment variable must be available to user running the SignServer application. (through the environment settings or running scripts)"]}),"\n",(0,i.jsx)(n.h2,{id:"configure-cryptoserver-cp5-pkcs11-for-signserver",children:"Configure CryptoServer CP5 PKCS#11 for SignServer"}),"\n",(0,i.jsxs)(n.p,{children:["In order SignServer get access to the CryptoServer CP5, it needs to be configured and available for the SignServer. This is configured as ",(0,i.jsx)(n.code,{children:"cryptotoken"})," in the ",(0,i.jsx)(n.code,{children:"signserver_deploy.properties"})," as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cryptotoken.p11.lib.110.name = CryptoServerCP5\ncryptotoken.p11.lib.110.file = /usr/lib/libcs_pkcs11_R2.so\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once the CryptoServer CP5 PKCS#11 is configured in ",(0,i.jsx)(n.code,{children:"signserver_deploy.properties"}),", SignServer must be redeployed to reflect changes and access the CryptoServer CP5 HSM."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"bin/ant deploy\n"})}),"\n",(0,i.jsx)(n.p,{children:"Make sure the application server is running and verify that SignServer was deployed correctly."})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>s});var i=r(67294);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);