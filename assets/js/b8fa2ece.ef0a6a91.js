"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[5416],{57098:function(n,e,t){t.r(e),t.d(e,{assets:function(){return a},contentTitle:function(){return s},default:function(){return l},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var r=t(85893),i=t(11151);const o={},s="Crypto Token Configuration",c={id:"signing/qscd-integration/nshield-xc-cc/cryptotoken",title:"Crypto Token Configuration",description:"nShield XC CC uses a standard PKCS#11 Crypto Token for the integration with the SignServer.",source:"@site/docs/30-signing/25-qscd-integration/09-nshield-xc-cc/11-cryptotoken.md",sourceDirName:"30-signing/25-qscd-integration/09-nshield-xc-cc",slug:"/signing/qscd-integration/nshield-xc-cc/cryptotoken",permalink:"/docs/signing/qscd-integration/nshield-xc-cc/cryptotoken",draft:!1,unlisted:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/30-signing/25-qscd-integration/09-nshield-xc-cc/11-cryptotoken.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nCipher PKCS#11 Installation",permalink:"/docs/signing/qscd-integration/nshield-xc-cc/middleware"},next:{title:"Introduction",permalink:"/docs/signing/sam-integration/overview"}},a={},d=[{value:"Sample configuration",id:"sample-configuration",level:2}];function u(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"crypto-token-configuration",children:"Crypto Token Configuration"}),"\n",(0,r.jsxs)(e.p,{children:["nShield XC CC uses a standard ",(0,r.jsx)(e.a,{href:"https://doc.primekey.com/signserver/signserver-reference/signserver-components/cryptotokens/pkcs11cryptotoken",children:"PKCS#11 Crypto Token"})," for the integration with the SignServer."]}),"\n",(0,r.jsx)(e.admonition,{type:"warning",children:(0,r.jsxs)(e.p,{children:["Private keys can be managed through the PKCS#11 Crypto Token, however, such private keys would not be generated and used as assigned private keys, but general private keys (see ",(0,r.jsx)(e.a,{href:"./cmts",children:"CMTS Security World"}),"). The PKCS#11 Crypto Token should always be configured as a last step with existing certificate and assigned private key authorized for signing/sealing operations."]})}),"\n",(0,r.jsx)(e.h2,{id:"sample-configuration",children:"Sample configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"WORKER6.CRYPTOTOKEN_IMPLEMENTATION_CLASS=org.signserver.server.cryptotokens.PKCS11CryptoToken\nWORKER6.SLOTLABELVALUE=testsoftcard01\nWORKER6.NAME=nShieldCMTSCryptoToken\nWORKER6.PIN=_MASKED_\nWORKER6.IMPLEMENTATION_CLASS=org.signserver.server.signers.CryptoWorker\nWORKER6.DEFAULTKEY=testassignedkey01\nWORKER6.ATTRIBUTES=attributes(generate,CKO_PUBLIC_KEY,*) \\= {\\r\\n   CKA_TOKEN \\= false\\r\\n   CKA_ENCRYPT \\= false\\r\\n   CKA_VERIFY \\= true\\r\\n   CKA_WRAP \\= false\\r\\n}\\r\\nattributes(generate, CKO_PRIVATE_KEY,*) \\= {\\r\\n   CKA_TOKEN \\= true\\r\\n   CKA_PRIVATE \\= true\\r\\n   CKA_SENSITIVE \\= true\\r\\n   CKA_EXTRACTABLE \\= false\\r\\n   CKA_DECRYPT \\= false\\r\\n   CKA_SIGN \\= true\\r\\n   CKA_UNWRAP \\= false\\r\\n}\nWORKER6.SHAREDLIBRARYNAME=nShieldXCCC\nWORKER6.DISABLED=FALSE\nWORKER6.TYPE=CRYPTO_WORKER\nWORKER6.SLOTLABELTYPE=SLOT_LABEL\n"})})]})}function l(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},11151:function(n,e,t){t.d(e,{Z:function(){return c},a:function(){return s}});var r=t(67294);const i={},o=r.createContext(i);function s(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);