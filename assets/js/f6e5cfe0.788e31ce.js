"use strict";(self.webpackChunkczertainly=self.webpackChunkczertainly||[]).push([[1665],{26834:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>n,metadata:()=>o,toc:()=>a});var c=r(85893),i=r(11151);const n={},s="Overview",o={id:"certificate-key/concept-design/architecture/overview",title:"Overview",description:"The architecture of the platform follows microservice approach.",source:"@site/docs/10-certificate-key/02-concept-design/02-architecture/00-overview.md",sourceDirName:"10-certificate-key/02-concept-design/02-architecture",slug:"/certificate-key/concept-design/architecture/overview",permalink:"/docs/certificate-key/concept-design/architecture/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/3KeyCompany/CZERTAINLY-Documentation/edit/documentation/docs/10-certificate-key/02-concept-design/02-architecture/00-overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/certificate-key/concept-design/overview"},next:{title:"Database",permalink:"/docs/certificate-key/concept-design/architecture/database"}},d={},a=[{value:"Architecture diagram",id:"architecture-diagram",level:2},{value:"Sample process flow",id:"sample-process-flow",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,c.jsx)(t.p,{children:"The architecture of the platform follows microservice approach.\nEach component and each part of the platform is a microservice. Using that approach, the platform is able to scale and maintain the services as needed."}),"\n",(0,c.jsx)(t.h2,{id:"architecture-diagram",children:"Architecture diagram"}),"\n",(0,c.jsxs)(t.p,{children:["The platform provides client interfaces to communicate with the ",(0,c.jsx)(t.code,{children:"Core"}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"Core"})," is the brain of the platform and is responsible for application logic and communication with authorized ",(0,c.jsx)(t.code,{children:"Connector"}),". ",(0,c.jsx)(t.code,{children:"Connector"})," is the implementation of the technology. ",(0,c.jsx)(t.code,{children:"Connector"})," implements the logic which is specific to the technology and provides a consistent results for the ",(0,c.jsx)(t.code,{children:"Core"}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["Each ",(0,c.jsx)(t.code,{children:"Interface"})," in the platform is designed to be a REST API with OpenAPI specification. This ensures that the platform is easy to use and maintain, extensible, flexible, and technology independent."]}),"\n",(0,c.jsx)(t.h2,{id:"sample-process-flow",children:"Sample process flow"}),"\n",(0,c.jsx)(t.p,{children:"The step below illustrates the process flow of processing request by the platform:"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Step #"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"1"}),(0,c.jsxs)(t.td,{children:[(0,c.jsx)(t.code,{children:"Client"})," triggers a request to the ",(0,c.jsx)(t.code,{children:"Core"}),"."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"2"}),(0,c.jsxs)(t.td,{children:[(0,c.jsx)(t.code,{children:"Core"})," receives the request and applies the logic to process the request. If needed, the ",(0,c.jsx)(t.code,{children:"Core"})," communicates with the appropriate ",(0,c.jsx)(t.code,{children:"Connector"})," for further technology specific processing."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"3"}),(0,c.jsxs)(t.td,{children:[(0,c.jsx)(t.code,{children:"Connector"})," process the request and translates the response to a format ",(0,c.jsx)(t.code,{children:"Core"})," can understand."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"4"}),(0,c.jsxs)(t.td,{children:["Once the ",(0,c.jsx)(t.code,{children:"Core"})," gets the data from the ",(0,c.jsx)(t.code,{children:"Connector"}),", it performs some designated operations based on the implemented logic. Once these operations are completed the ",(0,c.jsx)(t.code,{children:"Core"})," returns the response to the ",(0,c.jsx)(t.code,{children:"Client"}),"."]})]})]})]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},11151:(e,t,r)=>{r.d(t,{a:()=>s});var c=r(67294);const i={},n=c.createContext(i);function s(e){const t=c.useContext(n);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);